version: 2.1

parameters:
  nightly-version:
    type: string
    default: "nightly-2020-11-20"

orbs:
  codecov: codecov/codecov@1

executors:
  default:
    machine:
      image: ubuntu-1604-cuda-10.1:201909-23
    working_directory: ~/gpuci
    resource_class: gpu.nvidia.medium

restore-workspace: &restore-workspace
  attach_workspace:
    at: ~/

restore-cache: &restore-cache
  restore_cache:
    keys:
      - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}-vmx5
      - repo-source-{{ .Branch }}-{{ .Revision }}

set-env-path: &set-env-path
  name: Set the PATH env variable
  command: |
    echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.nightly-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' >> $BASH_ENV
    source $BASH_ENV

#commands:
#  test_target_pairing:
#    parameters:
#      target:
#        type: string
#    steps:
#      - *restore-workspace
#      - *restore-cache
#      - run:
#          name: Test pairing (<< parameters.target >>)
#          command: TARGET=<< parameters.target >> cargo test --no-default-features --features pairing
#          no_output_timeout: 15m
#
#  test_target_pairing_gpu:
#    parameters:
#      target:
#        type: string
#    steps:
#      - *restore-workspace
#      - *restore-cache
#      - run:
#          name: Test pairing (GPU) (<< parameters.target >>)
#          command: TARGET=<< parameters.target >> cargo test --release --no-default-features --features gpu,pairing
#          no_output_timeout: 30m
#
#  test_target_blst:
#    parameters:
#      target:
#        type: string
#    steps:
#      - *restore-workspace
#      - *restore-cache
#      - run:
#          name: Test blst (<< parameters.target >>)
#          command: TARGET=<< parameters.target >> cargo test --no-default-features --features blst
#          no_output_timeout: 15m
#
#  test_target_blst_gpu:
#    parameters:
#      target:
#        type: string
#    steps:
#      - *restore-workspace
#      - *restore-cache
#      - run:
#          name: Test blst (GPU) (<< parameters.target >>)
#          command: TARGET=<< parameters.target >> cargo test --release --no-default-features --features gpu,blst
#          no_output_timeout: 30m

jobs:

  cargo_fetch:
    executor: default
    steps:
      - checkout
      - run: curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
      - run: echo $BASH_ENV
      - run: echo $HOME
      - run: source $BASH_ENV
      - run: cargo --version
      - run: rustc --version
      - run:
          name: Update submodules
          command: git submodule update --init --recursive
      - run:
          name: Calculate dependencies
          command: cargo generate-lockfile
      - restore_cache:
          keys:
            - cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}-vmx5
      - run: cargo update
      - run: cargo fetch
      - run: rustup install $(cat rust-toolchain)
      - run: rustup default $(cat rust-toolchain)
      # A nightly build is needed for code coverage reporting
      - run: rustup toolchain install --profile minimal << pipeline.parameters.nightly-version >>
      - run: rustup component add rustfmt-preview
      - run: rustup component add clippy-preview
      - run: rustup component add --toolchain << pipeline.parameters.nightly-version >> llvm-tools-preview
      - run: rustc --version
      - run: cargo install rustfilt
      - run: rm -rf .git
      - persist_to_workspace:
          root: ~/
          paths:
            - gpuci
      - save_cache:
          key: cargo-v0-{{ checksum "rust-toolchain" }}-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}-{{ arch }}-vmx5
          paths:
            - "~/.cargo"
            - "~/.rustup"

  #test_pairing_x86_64-unknown-linux-gnu:
  #  executor: default
  #  steps:
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run: sudo apt-get update -y
  #    - run: apt-cache search opencl
  #    - run: sudo apt install -y ocl-icd-opencl-dev
  #    - test_target_pairing:
  #        target: "x86_64-unknown-linux-gnu"
  #
  #test_pairing_gpu_x86_64-unknown-linux-gnu:
  #  executor: default
  #  steps:
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run: sudo apt-get update -y
  #    - run: apt-cache search opencl
  #    - run: sudo apt install -y ocl-icd-opencl-dev
  #    - test_target_pairing_gpu:
  #        target: "x86_64-unknown-linux-gnu"
  #
  #
  #test_blst_x86_64-unknown-linux-gnu:
  #  executor: default
  #  steps:
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run: sudo apt-get update -y
  #    - run: apt-cache search opencl
  #    - run: sudo apt install -y ocl-icd-opencl-dev
  #    - test_target_blst:
  #        target: "x86_64-unknown-linux-gnu"
  #
  #test_blst_gpu_x86_64-unknown-linux-gnu:
  #  executor: default
  #  steps:
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run: sudo apt-get update -y
  #    - run: apt-cache search opencl
  #    - run: sudo apt install -y ocl-icd-opencl-dev
  #    - test_target_blst_gpu:
  #        target: "x86_64-unknown-linux-gnu"
  #
  #rustfmt:
  #  executor: default
  #  steps:
  #    - *restore-workspace
  #    - *restore-cache
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run:
  #        name: Run cargo fmt
  #        command: cargo fmt --all -- --check
  #
  #clippy:
  #  executor: default
  #  steps:
  #    - *restore-workspace
  #    - *restore-cache
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run:
  #        name: Run cargo clippy (blst)
  #        command: cargo clippy --no-default-features --features blst
  #    - run:
  #        name: Run cargo clippy (pairing)
  #        command: cargo clippy --no-default-features --features pairing
  #    - run:
  #        name: Run cargo clippy (gpu)
  #        command: cargo clippy --features gpu
  #
  #build_blst:
  #  executor: default
  #  steps:
  #    - *restore-workspace
  #    - *restore-cache
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run:
  #        name: Run cargo release build
  #        command: cargo build --release --no-default-features --features blst
  #
  #build_pairing:
  #  executor: default
  #  steps:
  #    - *restore-workspace
  #    - *restore-cache
  #    - run: echo 'export PATH="$HOME:~/.cargo/bin:$PATH"' >> $BASH_ENV
  #    - run: source $BASH_ENV
  #    - run:
  #        name: Run cargo release build
  #        command: cargo build --release --no-default-features --features pairing

  coverage:
    executor: default
    #environment:
    #  # CARGO_INCREMENTAL=0: incremental build is not supported when profiling
    #  CARGO_INCREMENTAL: 0
    #  # -Zinstrument-coverage: enable llvm coverage instrumentation
    #  # -Ccodegen-units=1: building in parallel is not supported when profiling
    #  # -Copt-level=0: disable optimizations for more accurate coverage
    #  # -Clink-dead-code: dead code should be considered as not covered code
    #  # -Coverflow-checks=off: checking for overflow is not needed for coverage reporting
    #  # -Cinline-threshold=0: do not inline
    #  RUSTFLAGS: -Zinstrument-coverage -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Cinline-threshold=0

    steps:
      - *restore-workspace
      - *restore-cache
      #- run: *set-env-path
      - run: echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.nightly-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' >> $BASH_ENV
      - run: source $BASH_ENV
      #- run:
      #    name: Set the PATH env variable
      #    command: |
      #      echo 'export PATH="$HOME:~/.cargo/bin:~/.rustup/toolchains/<< pipeline.parameters.nightly-version >>-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin:$PATH"' >> $BASH_ENV
      #      source $BASH_ENV
      - run:
          name: Generate coverage report
          command: |
            # CARGO_INCREMENTAL=0: incremental build is not supported when profiling
            export CARGO_INCREMENTAL=0
            # -Zinstrument-coverage: enable llvm coverage instrumentation
            # -Ccodegen-units=1: building in parallel is not supported when profiling
            # -Copt-level=0: disable optimizations for more accurate coverage
            # -Clink-dead-code: dead code should be considered as not covered code
            # -Coverflow-checks=off: checking for overflow is not needed for coverage reporting
            # -Cinline-threshold=0: do not inline
            export RUSTFLAGS="-Zinstrument-coverage -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Cinline-threshold=0"

            cargo +<< pipeline.parameters.nightly-version >> test --test '*'
            cargo +<< pipeline.parameters.nightly-version >> test --lib
            #cargo +<< pipeline.parameters.nightly-version >> test

            # Do *not* use sparse output. It leads to more lines that are not
            # taken into account at all
            llvm-profdata merge --output=default.profdata default.profraw
            # Only export the coverage of this project, we don't care about coverage of
            # dependencies
            llvm-cov export --ignore-filename-regex="\.cargo" --ignore-filename-regex="\.rustup" --format=lcov -instr-profile=default.profdata "$(find ./target/debug/deps/ -name 'bellperson-*' -not -name '*.d')" > lcov.info
      - codecov/upload:
          file: lcov.info

workflows:
  version: 2.1

  test:
    jobs:
      - cargo_fetch
      #- rustfmt:
      #    requires:
      #      - cargo_fetch
      #- clippy:
      #    requires:
      #      - cargo_fetch
      #
      #- test_pairing_x86_64-unknown-linux-gnu:
      #    requires:
      #      - cargo_fetch
      #- test_pairing_gpu_x86_64-unknown-linux-gnu:
      #    requires:
      #      - cargo_fetch
      #
      #- test_blst_x86_64-unknown-linux-gnu:
      #    requires:
      #      - cargo_fetch
      #- test_blst_gpu_x86_64-unknown-linux-gnu:
      #    requires:
      #      - cargo_fetch
      #
      #- build_blst:
      #    requires:
      #      - cargo_fetch
      #- build_pairing:
      #    requires:
      #      - cargo_fetch

      - coverage:
          requires:
            - cargo_fetch
